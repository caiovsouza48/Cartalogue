//
//  ListManufacturerInteractorTests.swift
//  Cartalogue
//
//  Created by Caio de Souza on 28/04/2018.
//  Copyright (c) 2018 Caio de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Cartalogue
import XCTest

class ListManufacturerInteractorTests: XCTestCase{
  // MARK: Subject under test
  
  var sut: ListManufacturerInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp(){
    super.setUp()
    setupListManufacturerInteractor()
  }
  
  override func tearDown(){
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupListManufacturerInteractor(){
    sut = ListManufacturerInteractor()
  }
  
  // MARK: Test doubles
  
  class ListManufacturerPresentationLogicSpy: ListManufacturerPresentationLogic{

        
    // MARK: Method call expectations
    var presentFetchManufacturersCalled = true
    var presentErrorAlertCalled = true
    var endRefreshControlIfNeededCalled = true
    var presentSelectedManufacturerCalled = true
    
    // MARK: Spied methods
    func presentFetchManufacturers(response: ListManufacturers.FetchManufacturers.Response) {
        presentFetchManufacturersCalled = true
    }
    
    func presentErrorAlert(title: String?, message: String?) {
        presentErrorAlertCalled = true
    }
    
    func endRefreshControlIfNeeded() {
        endRefreshControlIfNeededCalled = true
    }
        
    func presentSelectManufacturer() {
        presentSelectedManufacturerCalled = true
    }
    
  }
  
  // MARK: Tests
  
  func testFetchManufacturersShouldAskPresenterDoPresentationLogic(){
    // Given
    let spy = ListManufacturerPresentationLogicSpy()
    sut.presenter = spy
    let request = ListManufacturers.FetchManufacturers.Request(parameters: Seeds.SeededListManufacturerParameters.page0Size15Parameter)
    
    // When
    sut.doFetchManufacturers(request: request)
    
    // Then
    XCTAssertTrue(spy.presentFetchManufacturersCalled, "doFetchManufacturers(request:) should ask the presenter to format the result")
  }
  func testSelectManufacturerShouldAskPresenterDoPresentationLogic(){
    // Given
    let spy = ListManufacturerPresentationLogicSpy()
    sut.presenter = spy
    let selectedManufacturer = ListManufacturers.SelectManufacturer.Selected(wkda: Seeds.SeededWkda.page0WkdaArrayOfPageSize15.last!)
    
    // When
    sut.selectManufacturer(request: selectedManufacturer)
    
    // Then
    XCTAssertTrue(spy.presentSelectedManufacturerCalled, "selectManufacturer(request:) should ask the presenter to format the result")
    }
}
