//
//  MainTypesViewControllerTests.swift
//  Cartalogue
//
//  Created by Caio de Souza on 29/04/2018.
//  Copyright (c) 2018 Caio de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Cartalogue
import XCTest

class MainTypesViewControllerTests: XCTestCase{
  // MARK: Subject under test
  
  var sut: MainTypesViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp(){
    super.setUp()
    window = UIWindow()
    setupMainTypesViewController()
  }
  
  override func tearDown(){
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupMainTypesViewController(){
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: "Main", bundle: bundle)
    sut = storyboard.instantiateViewController(withIdentifier: "ListMainTypes") as! MainTypesViewController
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class MainTypesBusinessLogicSpy: MainTypesBusinessLogic{
    // MARK: Method call expectations
    var doFetchMainTypesCalled = false
    
    func doFetchMainTypes(request: MainTypes.FetchMainTypes.Request) {
        doFetchMainTypesCalled = true
    
    }

    func isLastPage(page: Int) -> Bool {
      return true
    }

    var wkdaID: String = "020"
 }

 class TableViewSpy: UITableView{
   // MARK: Method call expectations
   var reloadDataCalled = false
        
   // MARK: Spied methods
   override func reloadData(){
     reloadDataCalled = true
   }
 }
    
 class TableViewSpyDelegate : NSObject, UITableViewDelegate{
    var didSelectRowCalled = false
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        didSelectRowCalled = true
    }
 }
  
  // MARK: Tests
  func testShouldDoFetchMainTypesWhenViewWillAppear(){
        // Given
        let spy = MainTypesBusinessLogicSpy()
        sut.interactor = spy
        loadView()
        
        // When
        sut.viewWillAppear(true)
        
        // Then
        XCTAssertTrue(spy.doFetchMainTypesCalled, "viewWillAppear() should ask the interactor to do fetch the MainTypes manufacturers")
    }
    
    func testDisplayFetchedManufacturers(){
        // Given
        let tableViewSpy = TableViewSpy()
        sut.tableView = tableViewSpy
        
        // When
        let displayedMainTypes = [MainTypes.FetchMainTypes.ViewModel.DisplayedMainType(name: "Test1"),
                                  MainTypes.FetchMainTypes.ViewModel.DisplayedMainType(name: "Test2")]
        let viewModel = MainTypes.FetchMainTypes.ViewModel.init(totalPageCount: 1, displayedMainType: displayedMainTypes)
        sut.displayFetchMainTypes(viewModel: viewModel)
        
        // Then
        XCTAssertTrue(tableViewSpy.reloadDataCalled, "Displaying fetched main types should reload the table view")
    }
    
    func testNumberOfSectionEqualToCurrentPage(){
        // Given
        let tableViewSpy = TableViewSpy()
        sut.tableView = tableViewSpy
        let tableView = sut.tableView
        sut.currentPage = 1
        
        // When
        let numberOfSections = sut.numberOfSections(in: tableView!)
        
        // Then
        XCTAssertEqual(numberOfSections, sut.currentPage+1, "A properly configured table view Number of Sections should display the Number Of Section equal to the Current Page")
    }
    
    func testShouldPresentAlertWhenRowIsTapped(){
        // Given
        let tableViewSpy = TableViewSpy()
        tableViewSpy.delegate = TableViewSpyDelegate()
        sut.tableView = tableViewSpy
        
        let tableView = sut.tableView
        
        // When
        let delegate = tableViewSpy.delegate as! TableViewSpyDelegate
        delegate.tableView(tableView!, didSelectRowAt: IndexPath(row: 0, section: 0))
        
        // Then
        XCTAssertTrue(delegate.didSelectRowCalled, "An Alert should present when a row is Tapped")
    }
    
    
    func testShouldReloadTableViewWhenRefreshControlIsActive(){
        // Given
        let spy = MainTypesBusinessLogicSpy()
        sut.interactor = spy
        sut.currentPage = 1
        loadView()
        
        // When
        sut.refreshControlTriggered(sender: sut.refreshControl)
        
        // Then
        XCTAssertEqual(sut.currentPage,0 , "Refresh Control should Set the Current Page to 0")
        XCTAssertTrue(spy.doFetchMainTypesCalled, "doFetchManufacturers(request:) should be Called when refreshControl is Triggered")
    }
}

