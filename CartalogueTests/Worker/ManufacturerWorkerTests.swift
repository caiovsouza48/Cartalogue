//
//  ListManufacturerWorkerTests.swift
//  Cartalogue
//
//  Created by Caio de Souza on 28/04/2018.
//  Copyright (c) 2018 Caio de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Cartalogue
import XCTest

class ManufacturerWorkerTests: XCTestCase{
  // MARK: Subject under test
  
  var sut: ManufacturerWorker!
  static var resultSuccessAPIManufacturer = Result<APIManufacturer>.success(Seeds.API.page0APIManufacturer)
  
  // MARK: Test lifecycle
  
  override func setUp(){
    super.setUp()
    setupManufacturerWorker()
  }
  
  override func tearDown(){
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupManufacturerWorker(){
    sut = ManufacturerWorker(manufacturerStore: ManufacturerStoreRestAPISpy())
  }
  
  // MARK: Test doubles
  class ManufacturerStoreRestAPISpy : ManufacturerRestAPI{
    // MARK: Method call expectations
    
    var fetchManufacturersCalled = false
    var fetchMainTypesCalled = false
    
    override init() {
        super.init()
        self.apiClient = nil
    }
    
    override func fetchManufacturers(parameters: ListManufacturers.ListManufacturerParameters,
                            completionHandler: @escaping ManufacturerStoreFetchManufacturerAPIManufacturerCompletionHandler) {
      fetchManufacturersCalled = true
      completionHandler(ManufacturerWorkerTests.resultSuccessAPIManufacturer)
    }
    
    override func fetchMainTypes(parameters: MainTypes.MainTypesParameters, completionHandler: @escaping ManufacturerStoreFetchManufacturerAPIManufacturerCompletionHandler){
        fetchMainTypesCalled = true
        completionHandler(ManufacturerWorkerTests.resultSuccessAPIManufacturer)
    }
    
  }
  
  // MARK: Tests
  
  func testFetchManufacturerShouldReturnResult(){
    // Given
    let manufacturerAPISpy = sut.manufacturerStore as! ManufacturerStoreRestAPISpy
    
    // When
    var expectedResult = ManufacturerWorkerTests.resultSuccessAPIManufacturer
    let expect = expectation(description: "Wait for fetchManufacturers() to return")
    sut.fetchManufacturerList(parameters: Seeds.SeededListManufacturerParameters.page0Size15Parameter) { (result) in
        expectedResult = result
        expect.fulfill()
    }
    
    waitForExpectations(timeout: 1.1)
    let returnedManufacturer = try! expectedResult.dematerialize()
    
    // Then
    XCTAssertTrue(manufacturerAPISpy.fetchManufacturersCalled, "Calling fetchManufacturers() should ask the data store for a Result of APIManufacturer")
    XCTAssertEqual(returnedManufacturer.wkdaArray.count, Seeds.API.page0APIManufacturer.wkdaArray.count, "Calling fetchManufacturers() should return an APIManufacturer with wkdaArray Count equal to Seeeded array")
  }
    
  func testFetchMainTypesShouldReturnResult(){
    // Given
    let manufacturerAPISpy = sut.manufacturerStore as! ManufacturerStoreRestAPISpy
    
    // When
    let expect = expectation(description: "Wait for fetchMainTypes() to return")
    sut.fetchMainTypes(parameters: Seeds.SeededMainTypesParameters.page0Size15ID020Parameter, completionHandler: { (result) in
        expect.fulfill()
        
    })
    waitForExpectations(timeout: 1.1)
    
    // Then
    XCTAssertTrue(manufacturerAPISpy.fetchMainTypesCalled, "Calling fetchMainTypes() should ask the data store for a Result of APIManufacturer")
    }
}
