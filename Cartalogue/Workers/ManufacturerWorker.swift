//
//  ListManufacturerWorker.swift
//  Cartalogue
//
//  Created by Caio de Souza on 24/04/2018.
//  Copyright (c) 2018 Caio de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


class ManufacturerWorker{
    var manufacturerStore: ManufacturerStoreProtocol
    
    init(manufacturerStore: ManufacturerStoreProtocol){
        self.manufacturerStore = manufacturerStore
    }
    
    func fetchManufacturerList(parameters: ListManufacturers.ListManufacturerParameters,
                               completionHandler: @escaping (Result<APIManufacturer>) -> Void){
        DispatchQueue.main.async {
            self.manufacturerStore.fetchManufacturers(parameters: parameters) { (result) in
                completionHandler(result)
            }
        }  
    }
    
    func fetchMainTypes(parameters: MainTypes.MainTypesParameters, completionHandler: @escaping ManufacturerStoreFetchManufacturerAPIManufacturerCompletionHandler){
        DispatchQueue.main.async {
            self.manufacturerStore.fetchMainTypes(parameters: parameters, completionHandler: { (result) in
                completionHandler(result)
            })
        }
    }
}


// MARK: - Manufacturer store API
protocol ManufacturerStoreProtocol {
    func fetchManufacturers(parameters: ListManufacturers.ListManufacturerParameters, completionHandler: @escaping ManufacturerStoreFetchManufacturerAPIManufacturerCompletionHandler)
    func fetchMainTypes(parameters: MainTypes.MainTypesParameters, completionHandler: @escaping ManufacturerStoreFetchManufacturerAPIManufacturerCompletionHandler)
}

typealias ManufacturerStoreFetchManufacturerAPIManufacturerCompletionHandler = (Result<APIManufacturer>) -> Void
typealias ManufacturerStoreFetchManufacturerCompletionHandler = (Result<[Wkda]>) -> Void


enum ManufacturerStoreError: Equatable, Error{
    case CannotFetch(String)
}
func ==(lhs: ManufacturerStoreError, rhs: ManufacturerStoreError) -> Bool {
    switch (lhs, rhs) {
    case (.CannotFetch(let a), .CannotFetch(let b)) where a == b: return true
    default: return false
    }
}

