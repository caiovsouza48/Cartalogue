//
//  MainTypesViewController.swift
//  Cartalogue
//
//  Created by Caio de Souza on 27/04/2018.
//  Copyright (c) 2018 Caio de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainTypesDisplayLogic: class {
    func displayFetchMainTypes(viewModel: MainTypes.FetchMainTypes.ViewModel)
    func updateCurrentPageLabel(viewModel: MainTypes.FetchMainTypes.ViewModel)
    func colorFor(_ indexPath: IndexPath) -> UIColor
    func presentAlert(title: String?, message: String?)
    func endRefreshControlIfNeeded()
}

class MainTypesViewController: UIViewController, MainTypesDisplayLogic {

    
    
  var interactor: MainTypesBusinessLogic?
  var router: (NSObjectProtocol & MainTypesRoutingLogic & MainTypesDataPassing)?
  let pageSize: Int = 15
  var currentPage: Int = 0
  var displayedManufacturer: [MainTypes.FetchMainTypes.ViewModel.DisplayedMainType] = []
 
  // Outlets 
  @IBOutlet weak var tableView: UITableView!
  @IBOutlet weak var fetchedLabel: UILabel!
    
  var refreshControl : UIRefreshControl = UIRefreshControl()
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = MainTypesInteractor()
    let presenter = MainTypesPresenter()
    let router = MainTypesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    setupTableView()
  }
 
  override func viewWillAppear(_ animated: Bool) {
    doFetchMainTypes()
  }
    
  private func setupTableView(){
    tableView.register(MainTypeTableViewCell.self)
    tableView.refreshControl = refreshControl
    tableView.refreshControl?.addTarget(self, action: #selector(refreshControlTriggered(sender:)), for: .valueChanged)
        
    }
  
  // MARK: Display Logic Protocol
    
  @objc func objCDoFetchManufacturers(){
    currentPage += 1
    doFetchMainTypes()
  }
    
  func doFetchMainTypes(){
    fetchedLabel.text = "Fetching Next Page..."
    let request = MainTypes.FetchMainTypes.Request(parameters: MainTypes.MainTypesParameters(page: self.currentPage, pageSize: self.pageSize, manufacturerID: interactor?.wkdaID ?? ""))
        interactor?.doFetchMainTypes(request: request)
    }
  func displayFetchMainTypes(viewModel: MainTypes.FetchMainTypes.ViewModel) {
    displayedManufacturer.append(contentsOf: viewModel.displayedMainType)
    self.tableView.reloadData()
  }
    
  //MARK: Update Current Page Label
  func updateCurrentPageLabel(viewModel: MainTypes.FetchMainTypes.ViewModel) {
    fetchedLabel.text = "Fetched \(currentPage+1) pages of \(viewModel.totalPageCount)"
  }
    
  // MARK: Present Alert
  func presentAlert(title: String?, message: String?) {
    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)
    alertController.addAction(UIAlertAction(title: "Ok", style: .cancel, handler: { (alertAction) in
        alertController.dismiss(animated: true, completion: nil)
    }))
    self.present(alertController, animated: true, completion: nil)
  }

  // MARK: ColorForIndexPath
  func colorFor(_ indexPath: IndexPath) -> UIColor{
    return indexPath.row % 2 == 0 ? UIColor(white: 0.0, alpha: 0.2) : UIColor(white: 1.0, alpha: 1.0)
  }
    
  // MARK: Refresh Control
  func endRefreshControlIfNeeded() {
    if refreshControl.isRefreshing{
        refreshControl.endRefreshing()
    }
  }
    
  @objc func refreshControlTriggered(sender: UIRefreshControl){
    self.currentPage = 0
    self.displayedManufacturer.removeAll()
    doFetchMainTypes()
  }
}


// MARK: UITableViewDelegate
extension MainTypesViewController : UITableViewDelegate{
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        if scrollView.isNearBottomEdge{
            if let _interactor = interactor, !_interactor.isLastPage(page: currentPage + 1){
                
                // Throttle
                NSObject.cancelPreviousPerformRequests(withTarget: self, selector: #selector(objCDoFetchManufacturers), object: nil)
                self.perform(#selector(objCDoFetchManufacturers), with: nil, afterDelay: 0.5)
            }
        }
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return "Page \(section+1)"
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        return UIView()
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let selectedMainType = displayedManufacturer[indexPath.row]
        presentAlert(title: nil, message: "<\(interactor?.wkdaID ?? "??")>, <\(selectedMainType.name)>")
    }
}


// MARK: UITableViewDataSource
extension MainTypesViewController : UITableViewDataSource{
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return self.currentPage+1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return min(self.pageSize, displayedManufacturer.count)
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let currentManufacturer = displayedManufacturer[indexPath.row]
        let cell = tableView.dequeueReusableCell(forIndexPath: indexPath) as MainTypeTableViewCell
        cell.backgroundColor = colorFor(indexPath)
        cell.mainTypeLabel.text = currentManufacturer.name
        return cell
    }
}
