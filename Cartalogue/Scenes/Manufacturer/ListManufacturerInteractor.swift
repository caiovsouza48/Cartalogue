
//
//  ListManufacturerInteractor.swift
//  Cartalogue
//
//  Created by Caio de Souza on 24/04/2018.
//  Copyright (c) 2018 Caio de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListManufacturerBusinessLogic{
    func doFetchManufacturers(request: ListManufacturers.FetchManufacturers.Request)
    func isLastPage(page: Int) -> Bool
    func selectManufacturer(request: ListManufacturers.SelectManufacturer.Selected)
}

protocol ListManufacturerDataStore{
    var wkda: Wkda? { get set }
}

class ListManufacturerInteractor: ListManufacturerBusinessLogic, ListManufacturerDataStore{

      var presenter: ListManufacturerPresentationLogic?
      var worker: ManufacturerWorker?
      var wkda: Wkda?
      var totalPageCount: Int = Int.max
    
      // MARK: Do FetchManufacturers
      func doFetchManufacturers(request: ListManufacturers.FetchManufacturers.Request){
        guard request.parameters.page < totalPageCount else {
            return
        }
        let client = ManufacturerRestAPI(client: ApiClientImplementation(urlSessionConfiguration: URLSessionConfiguration.default, completionHandlerQueue: OperationQueue.main))
        worker = ManufacturerWorker(manufacturerStore: client)
        defer{
            self.presenter?.endRefreshControlIfNeeded()
        }
        worker?.fetchManufacturerList(parameters: request.parameters,
                                      completionHandler: { (result) in
                                        switch result{
                                            case .failure(let error):
                                                self.presenter?.presentErrorAlert(title: "Error", message: error.localizedDescription)
                                                
                                                break
                                            case .success(let apiManufacturer):
                                                self.totalPageCount = apiManufacturer.totalPageCount
                                                
                                                let response = ListManufacturers.FetchManufacturers.Response(
                                                    manufacturer: apiManufacturer)
                                                self.presenter?.presentFetchManufacturers(response: response)
                                            
                                            
                                        }
                                     })
    }
    
    func selectManufacturer(request: ListManufacturers.SelectManufacturer.Selected) {
        self.wkda = request.wkda
        self.presenter?.presentSelectManufacturer()
    }
    
    func isLastPage(page: Int) -> Bool {
        return page >= totalPageCount
    }
}
